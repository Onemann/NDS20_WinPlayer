using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Net.Json;
using System.Xml;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using DevExpress.XtraGrid;

namespace NDS20WinPlayer
{
    public partial class ManagerForm : DevExpress.XtraEditors.XtraForm
    {
        delegate void MessageOnStatusbarCallback(string msg, Enum logType);
        public ManagerForm()
        {
            InitializeComponent();
            DevExpress.Utils.AppearanceObject.DefaultFont = new Font("Malgun Gothic", 9);
            // This line of code is generated by Data Source Configuration Wizard
            //JsonArrayCollection arrCol = new JsonArrayCollection();


            //treeList1.DataSource = new System.Collections.Generic.List<System.Net.Json.JsonArrayCollection>();

            //List<scheduleclass> shclist = new List<scheduleclass>();

            //shclist.Add(new scheduleclass
            //    {
            //        tlclScheduleField = "schedule1"
            //    });


            string jsonSchedule = "[" +
                "{'tlclScheduleField':'sc2', 'tlclTypeField':'기본','tlclStartDateField':'2015-07-28T12:00Z', 'tlclEndDateField':'2015-08-30T12:00:00Z'}," +
                "{'tlclScheduleField':'sc3', 'tlclTypeField':'기본', 'tlclStartDateField':'2015-07-28T12:00Z', 'tlclEndDateField':'2015-08-30T12:00:00Z'}," +
                "{'tlclScheduleField':'sc4', 'tlclTypeField':'이벤트', 'tlclStartDateField':'2015-07-28T12:00Z', 'tlclEndDateField':'2015-08-30T12:00:00Z'}" +
                "]";

            scheduleclass[] shclist = JsonConvert.DeserializeObject<scheduleclass[]>(jsonSchedule, new IsoDateTimeConverter());

            treeList1.DataSource = shclist;

            /*
            arSchedule.Add(
                "{" +
                " \"tlclSchedule\": \"A.avi\"," +
                " \"xPos\": 400," +
                " \"yPos\": 100," +
                " \"width\": 700," +
                " \"height\": 396," +
                " \"fileName\": \"D:/Projects/NDS/Contents/A.avi\"," +
                " \"mute\": true " +
                "}"
                );

            arSchedule.Add(
                "{" +
                " \"tlclSchedule\": \"A.avi\"," +
                " \"xPos\": 400," +
                " \"yPos\": 100," +
                " \"width\": 700," +
                " \"height\": 396," +
                " \"fileName\": \"D:/Projects/NDS/Contents/A.avi\"," +
                " \"mute\": true " +
                "}"
                );
             */
            
            //pLinqServerModeSource1.Source = (System.Collections.Generic.IEnumerable<System.Net.Json.JsonArrayCollection>)null /* TODO: Assign the real System.Collections.Generic.IEnumerable source here.*/;
// This line of code is generated by Data Source Configuration Wizard
//treeList1.DataSource = new System.Collections.Generic.List<System.Net.Json.JsonArrayCollection>();
        }

        private void ManagerForm_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Escape:
                    Close();
                    break;

            }
        }

        //스케줄 파일에서 Json 스케줄 텍스트를 읽어 grid에 넣기
        private void AssignScheduleFileToTreeList()
        {
            try
            {
                List<clssSchedule> dataSource = new List<clssSchedule>();

                clssSchedule[] scheFileList;
                //clssScheduleFileList scheFileOneRecord;
                DirectoryInfo dirIfo = null;

                dirIfo = new DirectoryInfo(AppInfoStrc.DirOfSchedule);
                if (!dirIfo.Exists) dirIfo.Create();

                System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(AppInfoStrc.DirOfSchedule);

                string scheFullPath = "";
                string scheduleInfoJson = "";
                string scheType = "";

                foreach (System.IO.FileInfo f in di.GetFiles())
                {
                    scheFullPath = f.FullName;

                    #region 파일 JSON text 읽어서 grid에 채우기
                    scheduleInfoJson = System.IO.File.ReadAllText(@scheFullPath);

                    scheFileList = JsonConvert.DeserializeObject<clssSchedule[]>(scheduleInfoJson, new IsoDateTimeConverter());

                    #region 파일에 포함된 Json 배열의 스케줄을 Datasource에 추가하기
                    foreach (clssSchedule scheFileOneRecord in scheFileList)
                    {
                        #region 스케줄 코드에 따라 분류와 종류 입력

                        scheType = scheFileOneRecord.scheType;

                        switch (scheType)
                        {
                            case "01":
                                scheFileOneRecord.scheCategory = "일반";
                                scheFileOneRecord.scheKind = "기본";
                                break;
                            case "02":
                                scheFileOneRecord.scheCategory = "일반";
                                scheFileOneRecord.scheKind = "이벤트";
                                break;
                            case "03":
                                scheFileOneRecord.scheCategory = "동기화";
                                scheFileOneRecord.scheKind = "기본";
                                break;
                            case "04":
                                scheFileOneRecord.scheCategory = "동기화";
                                scheFileOneRecord.scheKind = "이벤트";
                                break;
                            case "05":
                                scheFileOneRecord.scheCategory = "사내방송";
                                scheFileOneRecord.scheKind = "기본";
                                break;
                            case "06":
                                scheFileOneRecord.scheCategory = "사내방송";
                                scheFileOneRecord.scheKind = "이벤트";
                                break;
                        }
                        #endregion

                        // 파일을 읽기 위해 파일명을 저장함
                        scheFileOneRecord.scheFileName = f.Name;

                        dataSource.Add(scheFileOneRecord);
                    }
                    #endregion
                }
                scheFileList = null;

                trlstSchedule.DataSource = dataSource;

                    #endregion
            }
            catch(Exception ex)
            {
                LogFile.threadWriteLog(ex.Message, LogType.LOG_ERROR);
            }
        }

        // 로그 폴더에 있는 모든 로그파일 이름을 Grid에 넣기
        private void AssignLogFileToTreeList()
        {
            try
            {
                List<clssLogFileList> dataSource = new List<clssLogFileList>();

                DirectoryInfo dirInfo;

                dirInfo = new DirectoryInfo(AppInfoStrc.DirOfLog);
                if (!dirInfo.Exists) dirInfo.Create();

                System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(AppInfoStrc.DirOfLog);

                foreach (System.IO.FileInfo f in di.GetFiles())
                {
                    clssLogFileList item = new clssLogFileList();
                    item.logFileName = f.Name;
                    dataSource.Add(item);
                }

                trlstLogFile.DataSource = dataSource;
                trlstLogFile.MoveFirst();
            }
            catch(Exception ex)
            {
                LogFile.threadWriteLog(ex.Message, LogType.LOG_ERROR);
            }

        }

        private void trlstSchedule_Load(object sender, EventArgs e)
        {
            AssignScheduleFileToTreeList();
        }

        private void trlstSchedule_FocusedNodeChanged(object sender, DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        {

            string jsonScheduleFile = e.Node.GetDisplayText("scheFileName");
            string scheduleName = e.Node.GetDisplayText("ctscName");
            int scheduleTotalSector = (int)e.Node.GetValue(tlcScheTotalSector);// e.Node.GetDisplayText("scheTotalSector");

            jsonScheduleToContentsGrid(jsonScheduleFile, scheduleName, scheduleTotalSector);

            //MessageBox.Show(scheduleFilePath);
            
        }

        
        #region Read JSON schedule files and fill in the contents grid
        private void jsonScheduleToContentsGrid(string jsonScheduleFile, string scheduleName, int scheduleTotalSector)
        {
            if (jsonScheduleFile == "")
            {
                LogFile.threadWriteLog(scheduleName + ": 스케줄 정보가 잘못되었습니다.", LogType.LOG_FATAL);
                return;
            }

            try
            {
                string scheduleFilePath = AppInfoStrc.DirOfSchedule + "\\" + jsonScheduleFile;
                string scheduleText = System.IO.File.ReadAllText(@scheduleFilePath);

                if (scheduleText == "")
                {
                    LogFile.threadWriteLog(jsonScheduleFile + ": 스케줄 정보가 잘못되었습니다.", LogType.LOG_FATAL);
                    return;
                }

                dynamic dynSchedule = JsonConvert.DeserializeObject(scheduleText);

                string contentsText = "";

                
                #region 구간 밴드 동적 생성
                bgrdvContents.Bands[4].Columns.Clear();

                bgrdvContents.Bands[bgrdvContents.Bands.IndexOf(grdbndSector)].Visible = false;

                List<DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn> lstsector = new List<DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn>();


                for (int idx = 1; idx <= scheduleTotalSector; idx++)
                {
                    lstsector.Add(new DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn());
                    lstsector[idx-1].Caption = (idx).ToString();
                    lstsector[idx-1].OptionsColumn.AllowEdit = false;
                    lstsector[idx-1].OptionsColumn.AllowFocus = false;
                    lstsector[idx-1].OptionsColumn.ReadOnly = true;
                    //lstsector[idx].FilterMode = ColumnFilterMode.DisplayText;
                    lstsector[idx-1].Width = 25;
                    lstsector[idx-1].Visible = true;
                    lstsector[idx-1].Name = "grdcSector" + (idx).ToString();
                    lstsector[idx-1].FieldName = "grdcSector" + (idx).ToString();
                    lstsector[idx-1].UnboundType = DevExpress.Data.UnboundColumnType.Boolean;
                    bgrdvContents.Bands[bgrdvContents.Bands.IndexOf(grdbndSector)].Columns.Add(lstsector[idx-1]);

                }
                bgrdvContents.Bands[bgrdvContents.Bands.IndexOf(grdbndSector)].Visible = true;

                for (int idx = 1; idx <= scheduleTotalSector; idx++)
                {
                    lstsector[idx-1].Width = 25;
                }

                lstsector.Clear();
                lstsector = null;
                #endregion


                /*
                if (scheduleText.IndexOf(startContentsDelemeter) > 0) // if some contents were included in this schedule
                {
                    int posStartContetnsDelemeter = scheduleText.IndexOf(startContentsDelemeter) + startContentsDelemeter.Length - 1;
                    int posEndOfContentsDelemeter = scheduleText.IndexOf("]");
                    int contentsLength = posEndOfContentsDelemeter - posStartContetnsDelemeter;
                    contentsText = scheduleText.Substring(posStartContetnsDelemeter, contentsLength + 1);

                }
                 */

                #region Abstract contents JSON data
                grdContents.DataSource = null;
                for (int idx = 0; idx < dynSchedule.Count; idx++)
                {
                    if (dynSchedule[idx].ctscName == scheduleName)
                    {
                        if (dynSchedule[idx].Contents != null)
                        {
                            contentsText = dynSchedule[idx].Contents.ToString();
                            clssContents[] cntsList = JsonConvert.DeserializeObject<clssContents[]>(contentsText, new IsoDateTimeConverter());
                            grdContents.DataSource = cntsList;
                        }
                        else
                        {
                            LogFile.threadWriteLog(scheduleName + ": 콘텐츠 정보가 잘못되었습니다.", LogType.LOG_FATAL);

                        }
                        break;
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                LogFile.threadWriteLog(ex.Message + "|" + ex.Source, LogType.LOG_ERROR);
            }
        }
        #endregion

        private void trlstLogFile_FocusedNodeChanged(object sender, DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        {
            string logFileName = e.Node.GetDisplayText("logFileName");
            displayLogContents(logFileName);
        }

        private void displayLogContents(string logFileName)
        {
            string logFilePath = AppInfoStrc.DirOfLog + "\\" + logFileName;
            string logTextJson = "[" + System.IO.File.ReadAllText(@logFilePath) + "]";

            clssLogList[] logList = JsonConvert.DeserializeObject<clssLogList[]>(logTextJson, new IsoDateTimeConverter());

            grdctrlLog.DataSource = logList;
        }

        private void trlstLogFile_Load(object sender, EventArgs e)
        {
            AssignLogFileToTreeList();
        }

        private void grdctrlLog_Load(object sender, EventArgs e)
        {
            grdvLog.GroupPanelText = "그룹을 지으시려면 컬럼 해더를 여기로 드래그하시요";
        }

        private void grdContents_Load(object sender, EventArgs e)
        {
            bgrdvContents.GroupPanelText = "그룹을 지으시려면 컬럼 해더를 여기로 드래그하시요";
        }

        public void MessageOnStatusbar(string message, Enum logType)
        {
            System.Drawing.Color messageColor = new System.Drawing.Color();

            switch ((LogType)logType)
            {
                case LogType.LOG_FATAL:
                    messageColor = Color.Red;
                    break;
                case LogType.LOG_ERROR:
                    messageColor = Color.OrangeRed;
                    break;
                case LogType.LOG_WARN:
                    messageColor = Color.Yellow;
                    break;
                case LogType.LOG_INFO:
                    messageColor = Color.White;
                    break;
                case LogType.LOG_DEBUG:
                    messageColor = Color.Purple;
                    break;
                case LogType.LOG_TRACE:
                    messageColor = Color.Cyan;
                    break;
            }
            if (this.InvokeRequired)
            {
                MessageOnStatusbarCallback d = new MessageOnStatusbarCallback(MessageOnStatusbar);
                this.Invoke(d, new object[] { message, logType });
            }
            else
            {
                this.statusMessage.ForeColor = messageColor;
                this.statusMessage.Text = message;

                string logFileName = this.trlstLogFile.FocusedNode.GetDisplayText("logFileName");
                string logFilePath = AppInfoStrc.DirOfLog + "\\" + logFileName;
                string logTextJson = "[" + System.IO.File.ReadAllText(@logFilePath) + "]";

                clssLogList[] logList = JsonConvert.DeserializeObject<clssLogList[]>(logTextJson, new IsoDateTimeConverter());
                this.grdctrlLog.DataSource = logList;
                //grdctrlLog.DataSource = logList;

                //this.displayLogContents(logFileName);
            }
        }

        private void ManagerForm_Load(object sender, EventArgs e)
        {
            statusMessage.Text = "";
        }

        private void bgrdvContents_RowLoaded(object sender, DevExpress.XtraGrid.Views.Base.RowEventArgs e)
        {
            string cellValue;
            cellValue = bgrdvContents.GetRowCellDisplayText(e.RowHandle, bgrdvContents.Columns["구간"]);
            bgrdvContents.SetRowCellValue(e.RowHandle, bgrdvContents.Columns["1"], true);
            /*
                    object cellValue = Convert.ToBoolean(true);
                    this.bgrdvContents.Columns[7].View.SetRowCellValue(e.RowHandle, "sector1", cellValue);
      //      DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn bgc as sender;
                    this.bgrdvContents.RefreshData();

            */
        }
        private void bgrdvContents_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            string sectorCellValue = "";
            if (e.Column.FieldName.Contains("grdcSector"))
            {
//                if (bgrdvContents.GetRowCellValue(e.ListSourceRowIndex, "ctscSector") == null) return;
                sectorCellValue = bgrdvContents.GetRowCellValue(e.ListSourceRowIndex, "ctscSector").ToString();
                var arrSectors = sectorCellValue.Split(',');
                if (arrSectors.Contains(e.Column.Caption)) 
                    e.Value = true;
                
            }
        }

        private void grdvLog_RowCellStyle(object sender, DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs e)
        {
            if(e.Column == grdcLogType)
            {
                var data = grdvLog.GetRowCellValue(e.RowHandle, grdcLogType) as String;
                if (data == null) return;

                System.Drawing.Color messageColor = new System.Drawing.Color();
                switch (data.ToString())
                {
                    case "FATAL":
                        messageColor = Color.Red;
                        break;
                    case "ERROR":
                        messageColor = Color.OrangeRed;
                        break;
                    case "WARN":
                        messageColor = Color.Yellow;
                        break;
                    case "INFO":
                        messageColor = Color.White;
                        break;
                    case "DEBUG":
                        messageColor = Color.Purple;
                        break;
                    case "TRACE":
                        messageColor = Color.Cyan;
                        break;
                }
                e.Appearance.ForeColor = messageColor;
            }
        }
    }
}